// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RLStats_Classes.DB;

#nullable disable

namespace RLStats_Classes.Migrations
{
    [DbContext(typeof(ReplayContext))]
    partial class ReplayContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.AdvancedPlayer", b =>
                {
                    b.Property<string>("CustomId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("AdvancedTeamId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("CameraId")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("Car_id")
                        .HasColumnType("int");

                    b.Property<string>("Car_name")
                        .HasColumnType("longtext");

                    b.Property<float?>("End_time")
                        .HasColumnType("float");

                    b.Property<string>("IdCustomId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("Start_time")
                        .HasColumnType("int");

                    b.Property<string>("StatsId")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("Steering_sensitivity")
                        .HasColumnType("int");

                    b.HasKey("CustomId");

                    b.HasIndex("AdvancedTeamId");

                    b.HasIndex("CameraId");

                    b.HasIndex("IdCustomId");

                    b.HasIndex("StatsId");

                    b.ToTable("AdvancedPlayer");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.AdvancedReplay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("BlueId")
                        .HasColumnType("varchar(95)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Map_code")
                        .HasColumnType("longtext");

                    b.Property<string>("Map_name")
                        .HasColumnType("longtext");

                    b.Property<string>("Match_guid")
                        .HasColumnType("longtext");

                    b.Property<string>("Match_type")
                        .HasColumnType("longtext");

                    b.Property<string>("OrangeId")
                        .HasColumnType("varchar(95)");

                    b.Property<bool?>("Overtime")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Overtime_seconds")
                        .HasColumnType("int");

                    b.Property<string>("Playlist_id")
                        .HasColumnType("longtext");

                    b.Property<string>("Playlist_name")
                        .HasColumnType("longtext");

                    b.Property<string>("Rocket_league_id")
                        .HasColumnType("longtext");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Season_type")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<int?>("Team_size")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("UploaderId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Visibility")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BlueId");

                    b.HasIndex("OrangeId");

                    b.HasIndex("UploaderId");

                    b.ToTable("AdvancedReplays");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.AdvancedTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<string>("StatsId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("StatsId");

                    b.ToTable("AdvancedTeam");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.Ball", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<float?>("Possession_time")
                        .HasColumnType("float");

                    b.Property<float?>("Time_in_side")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Ball");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.Boost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("Amount_collected")
                        .HasColumnType("int");

                    b.Property<int?>("Amount_collected_big")
                        .HasColumnType("int");

                    b.Property<int?>("Amount_collected_small")
                        .HasColumnType("int");

                    b.Property<int?>("Amount_overfill")
                        .HasColumnType("int");

                    b.Property<int?>("Amount_overfill_stolen")
                        .HasColumnType("int");

                    b.Property<int?>("Amount_stolen")
                        .HasColumnType("int");

                    b.Property<int?>("Amount_stolen_big")
                        .HasColumnType("int");

                    b.Property<int?>("Amount_stolen_small")
                        .HasColumnType("int");

                    b.Property<int?>("Amount_used_while_supersonic")
                        .HasColumnType("int");

                    b.Property<float?>("Avg_amount")
                        .HasColumnType("float");

                    b.Property<float?>("Bcpm")
                        .HasColumnType("float");

                    b.Property<int?>("Bpm")
                        .HasColumnType("int");

                    b.Property<int?>("Count_collected_big")
                        .HasColumnType("int");

                    b.Property<int?>("Count_collected_small")
                        .HasColumnType("int");

                    b.Property<int?>("Count_stolen_big")
                        .HasColumnType("int");

                    b.Property<int?>("Count_stolen_small")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float?>("Time_boost_0_25")
                        .HasColumnType("float");

                    b.Property<float?>("Time_boost_25_50")
                        .HasColumnType("float");

                    b.Property<float?>("Time_boost_50_75")
                        .HasColumnType("float");

                    b.Property<float?>("Time_boost_75_100")
                        .HasColumnType("float");

                    b.Property<float?>("Time_full_boost")
                        .HasColumnType("float");

                    b.Property<float?>("Time_zero_boost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Boost");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Boost");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.Camera", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("Distance")
                        .HasColumnType("int");

                    b.Property<int?>("Fov")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Pitch")
                        .HasColumnType("int");

                    b.Property<float?>("Stiffness")
                        .HasColumnType("float");

                    b.Property<float?>("Swivel_speed")
                        .HasColumnType("float");

                    b.Property<float?>("Transition_speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.Core", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("Assists")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Goals")
                        .HasColumnType("int");

                    b.Property<int?>("Goals_against")
                        .HasColumnType("int");

                    b.Property<int?>("Saves")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<float?>("Shooting_percentage")
                        .HasColumnType("float");

                    b.Property<int?>("Shots")
                        .HasColumnType("int");

                    b.Property<int?>("Shots_against")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Core");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Core");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.Demo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("Inflicted")
                        .HasColumnType("int");

                    b.Property<int?>("Taken")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Demo");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.GeneralMovement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("Count_powerslide")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float?>("Time_boost_speed")
                        .HasColumnType("float");

                    b.Property<float?>("Time_ground")
                        .HasColumnType("float");

                    b.Property<float?>("Time_high_air")
                        .HasColumnType("float");

                    b.Property<float?>("Time_low_air")
                        .HasColumnType("float");

                    b.Property<float?>("Time_powerslide")
                        .HasColumnType("float");

                    b.Property<float?>("Time_slow_speed")
                        .HasColumnType("float");

                    b.Property<float?>("Time_supersonic_speed")
                        .HasColumnType("float");

                    b.Property<int?>("Total_distance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GeneralMovement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GeneralMovement");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.GeneralPositioning", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float?>("Time_behind_ball")
                        .HasColumnType("float");

                    b.Property<float?>("Time_defensive_half")
                        .HasColumnType("float");

                    b.Property<float?>("Time_defensive_third")
                        .HasColumnType("float");

                    b.Property<float?>("Time_infront_ball")
                        .HasColumnType("float");

                    b.Property<float?>("Time_neutral_third")
                        .HasColumnType("float");

                    b.Property<float?>("Time_offensive_half")
                        .HasColumnType("float");

                    b.Property<float?>("Time_offensive_third")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GeneralPositioning");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GeneralPositioning");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.Id", b =>
                {
                    b.Property<string>("CustomId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ID")
                        .HasColumnType("longtext");

                    b.Property<string>("Platform")
                        .HasColumnType("longtext");

                    b.HasKey("CustomId");

                    b.ToTable("Id");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.PlayerStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("DemoId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("PlayerBoostId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("PlayerCoreId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("PlayerMovementId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("PlayerPositioningId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("DemoId");

                    b.HasIndex("PlayerBoostId");

                    b.HasIndex("PlayerCoreId");

                    b.HasIndex("PlayerMovementId");

                    b.HasIndex("PlayerPositioningId");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.TeamStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("BallId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("BoostId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("CoreId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("DemoId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("MovementId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("PositioningId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("BallId");

                    b.HasIndex("BoostId");

                    b.HasIndex("CoreId");

                    b.HasIndex("DemoId");

                    b.HasIndex("MovementId");

                    b.HasIndex("PositioningId");

                    b.ToTable("TeamStats");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.Uploader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Profile_url")
                        .HasColumnType("longtext");

                    b.Property<string>("Steam_id")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Uploader");
                });

            modelBuilder.Entity("RLStats_Classes.Models.Player", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<double>("EndTime")
                        .HasColumnType("double");

                    b.Property<bool>("MVP")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<double>("StartTime")
                        .HasColumnType("double");

                    b.Property<string>("TeamId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("Name");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("RLStats_Classes.Models.Replay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("BlueId")
                        .HasColumnType("varchar(95)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("OrangeId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Playlist")
                        .HasColumnType("longtext");

                    b.Property<string>("RocketLeagueId")
                        .HasColumnType("longtext");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<string>("SeasonType")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Uploader")
                        .HasColumnType("longtext");

                    b.Property<string>("Visibility")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BlueId");

                    b.HasIndex("OrangeId");

                    b.ToTable("Replays");
                });

            modelBuilder.Entity("RLStats_Classes.Models.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("InitialTeamSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.PlayerBoost", b =>
                {
                    b.HasBaseType("RLStats_Classes.AdvancedModels.Boost");

                    b.Property<float?>("Percent_boost_0_25")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_boost_25_50")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_boost_50_75")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_boost_75_100")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_full_boost")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_zero_boost")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("PlayerBoost");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.PlayerCore", b =>
                {
                    b.HasBaseType("RLStats_Classes.AdvancedModels.Core");

                    b.Property<bool?>("Mvp")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("PlayerCore");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.PlayerMovement", b =>
                {
                    b.HasBaseType("RLStats_Classes.AdvancedModels.GeneralMovement");

                    b.Property<float?>("Avg_powerslide_duration")
                        .HasColumnType("float");

                    b.Property<int?>("Avg_speed")
                        .HasColumnType("int");

                    b.Property<float?>("Avg_speed_percentage")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_boost_speed")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_ground")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_high_air")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_low_air")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_slow_speed")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_supersonic_speed")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("PlayerMovement");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.PlayerPositioning", b =>
                {
                    b.HasBaseType("RLStats_Classes.AdvancedModels.GeneralPositioning");

                    b.Property<int?>("Avg_distance_to_ball")
                        .HasColumnType("int");

                    b.Property<int?>("Avg_distance_to_ball_no_possession")
                        .HasColumnType("int");

                    b.Property<int?>("Avg_distance_to_ball_possession")
                        .HasColumnType("int");

                    b.Property<int?>("Avg_distance_to_mates")
                        .HasColumnType("int");

                    b.Property<int?>("Goals_against_while_last_defender")
                        .HasColumnType("int");

                    b.Property<float?>("Percent_behind_ball")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_closest_to_ball")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_defensive_half")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_defensive_third")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_farthest_from_ball")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_infront_ball")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_most_back")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_most_forward")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_neutral_third")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_offensive_half")
                        .HasColumnType("float");

                    b.Property<float?>("Percent_offensive_third")
                        .HasColumnType("float");

                    b.Property<float?>("Time_closest_to_ball")
                        .HasColumnType("float");

                    b.Property<float?>("Time_farthest_from_ball")
                        .HasColumnType("float");

                    b.Property<float?>("Time_most_back")
                        .HasColumnType("float");

                    b.Property<float?>("Time_most_forward")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("PlayerPositioning");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.AdvancedPlayer", b =>
                {
                    b.HasOne("RLStats_Classes.AdvancedModels.AdvancedTeam", null)
                        .WithMany("Players")
                        .HasForeignKey("AdvancedTeamId");

                    b.HasOne("RLStats_Classes.AdvancedModels.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("CameraId");

                    b.HasOne("RLStats_Classes.AdvancedModels.Id", "Id")
                        .WithMany()
                        .HasForeignKey("IdCustomId");

                    b.HasOne("RLStats_Classes.AdvancedModels.PlayerStats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.Navigation("Camera");

                    b.Navigation("Id");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.AdvancedReplay", b =>
                {
                    b.HasOne("RLStats_Classes.AdvancedModels.AdvancedTeam", "Blue")
                        .WithMany()
                        .HasForeignKey("BlueId");

                    b.HasOne("RLStats_Classes.AdvancedModels.AdvancedTeam", "Orange")
                        .WithMany()
                        .HasForeignKey("OrangeId");

                    b.HasOne("RLStats_Classes.AdvancedModels.Uploader", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId");

                    b.Navigation("Blue");

                    b.Navigation("Orange");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.AdvancedTeam", b =>
                {
                    b.HasOne("RLStats_Classes.AdvancedModels.TeamStats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.PlayerStats", b =>
                {
                    b.HasOne("RLStats_Classes.AdvancedModels.Demo", "Demo")
                        .WithMany()
                        .HasForeignKey("DemoId");

                    b.HasOne("RLStats_Classes.AdvancedModels.PlayerBoost", "PlayerBoost")
                        .WithMany()
                        .HasForeignKey("PlayerBoostId");

                    b.HasOne("RLStats_Classes.AdvancedModels.PlayerCore", "PlayerCore")
                        .WithMany()
                        .HasForeignKey("PlayerCoreId");

                    b.HasOne("RLStats_Classes.AdvancedModels.PlayerMovement", "PlayerMovement")
                        .WithMany()
                        .HasForeignKey("PlayerMovementId");

                    b.HasOne("RLStats_Classes.AdvancedModels.PlayerPositioning", "PlayerPositioning")
                        .WithMany()
                        .HasForeignKey("PlayerPositioningId");

                    b.Navigation("Demo");

                    b.Navigation("PlayerBoost");

                    b.Navigation("PlayerCore");

                    b.Navigation("PlayerMovement");

                    b.Navigation("PlayerPositioning");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.TeamStats", b =>
                {
                    b.HasOne("RLStats_Classes.AdvancedModels.Ball", "Ball")
                        .WithMany()
                        .HasForeignKey("BallId");

                    b.HasOne("RLStats_Classes.AdvancedModels.Boost", "Boost")
                        .WithMany()
                        .HasForeignKey("BoostId");

                    b.HasOne("RLStats_Classes.AdvancedModels.Core", "Core")
                        .WithMany()
                        .HasForeignKey("CoreId");

                    b.HasOne("RLStats_Classes.AdvancedModels.Demo", "Demo")
                        .WithMany()
                        .HasForeignKey("DemoId");

                    b.HasOne("RLStats_Classes.AdvancedModels.GeneralMovement", "Movement")
                        .WithMany()
                        .HasForeignKey("MovementId");

                    b.HasOne("RLStats_Classes.AdvancedModels.GeneralPositioning", "Positioning")
                        .WithMany()
                        .HasForeignKey("PositioningId");

                    b.Navigation("Ball");

                    b.Navigation("Boost");

                    b.Navigation("Core");

                    b.Navigation("Demo");

                    b.Navigation("Movement");

                    b.Navigation("Positioning");
                });

            modelBuilder.Entity("RLStats_Classes.Models.Player", b =>
                {
                    b.HasOne("RLStats_Classes.Models.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("RLStats_Classes.Models.Replay", b =>
                {
                    b.HasOne("RLStats_Classes.Models.Team", "Blue")
                        .WithMany()
                        .HasForeignKey("BlueId");

                    b.HasOne("RLStats_Classes.Models.Team", "Orange")
                        .WithMany()
                        .HasForeignKey("OrangeId");

                    b.Navigation("Blue");

                    b.Navigation("Orange");
                });

            modelBuilder.Entity("RLStats_Classes.AdvancedModels.AdvancedTeam", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("RLStats_Classes.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
